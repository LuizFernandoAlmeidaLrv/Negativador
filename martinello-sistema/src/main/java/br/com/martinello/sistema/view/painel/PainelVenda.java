/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.martinello.sistema.view.painel;

import br.com.martinello.bd.matriz.model.domain.ContasReceberControl;
import br.com.martinello.consulta.Domain.ContasReceber_Movimentos;
import br.com.martinello.componentesbasicos.paineis.Painel;
import br.com.martinello.consulta.Domain.ContasReceberModel;
import br.com.martinello.consulta.Domain.ParcelasModel;
import br.com.martinello.consulta.Domain.VendasItensModel;
import br.com.martinello.consulta.Domain.VendasModel;
import br.com.martinello.util.excessoes.ErroSistemaException;
import com.towel.swing.table.ObjectTableModel;
import java.awt.Color;
import java.util.LinkedList;
import java.util.List;
import javax.swing.event.ListSelectionEvent;

/**
 *
 * @author luiz.almeida
 */
public class PainelVenda extends Painel {

    /**
     * Creates new form PainelVenda
     */
    public ContasReceberControl contasReceberControl;
    private double valorOriginal;
    public static List<VendasModel> lVendas;
    private static List<VendasItensModel> lVendasItens;
    private static List<ContasReceberModel> lContasReceber;
    private static List<ContasReceber_Movimentos> lContasReceber_Mov;
    private static List<ParcelasModel> lParcelas;
    private boolean resultado;

    private final ObjectTableModel<VendasModel> otmVendas = new ObjectTableModel<>(VendasModel.class, "idVenda,operacao,tipoVenda,dataVenda,cliente,clienteEndereco,"
            + "nomeCliente,vendedor,vlrAvista,vlrAprazo,situacao,devolvida");
    private final ObjectTableModel<VendasItensModel> otmVendasItens = new ObjectTableModel<>(VendasItensModel.class, "tipoEntrega,produto,estoque,calcJuros,serial,"
            + "numeroSerie,observacao,local,localLoja,vlrAvista,vlrTotAvista,vlrTotAprazo,quantidade");
    private final ObjectTableModel<ParcelasModel> otmParcela = new ObjectTableModel<>(ParcelasModel.class, "sequencia,formaPgto,tipoParcela,vencimento,valor");
    private final ObjectTableModel<ContasReceberModel> otmContasReceberVendas = new ObjectTableModel<>(ContasReceberModel.class,
            "venda,tipo,dataLancamento,cliente,clienteEndereco,docSgl,numeroParcela,dataVencimento,dataPagamento,previsaoPagamento,valor,valorAberto,situcao,tipoBaixa,observacao,avalista");
    private final ObjectTableModel<ContasReceber_Movimentos> otmCrMov = new ObjectTableModel<>(ContasReceber_Movimentos.class, "idContasReceberMov,cartao,cheque,voucher,dataMov,tipoMovimento,tipoBaixa,valorDesconto,valorJuros,valorCalculado,valorPago,capitalPago,valorJurosPago,situacao,observacao");

    public PainelVenda() {
        initComponents();
        lVendas = new LinkedList<>();
        lVendasItens = new LinkedList<>();
        lContasReceber = new LinkedList<>();
        lParcelas = new LinkedList<>();
        tpVendas.getSelectionModel().addListSelectionListener((ListSelectionEvent evt) -> {
            if (evt.getValueIsAdjusting()) {
                return;
            }
            if (tpVendas.getSelectedRow() >= 0) {
                setContasReceber();
                setVendaItens();
                setParcelas();
            }
        });
        
        tpCrVendas.getSelectionModel().addListSelectionListener((ListSelectionEvent evt) -> {
            if (evt.getValueIsAdjusting()) {
                return;
            }
            if (tpCrVendas.getSelectedRow() >= 0) {
                setContasReceber_Mov();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ppVendas = new br.com.martinello.componentesbasicos.paineis.PainelPadrao();
        jspVendas = new javax.swing.JScrollPane();
        tpVendas = new br.com.martinello.componentesbasicos.TabelaPadrao();
        paItensParcelas = new br.com.martinello.componentesbasicos.paineis.PainelAba();
        ppVendasItens = new br.com.martinello.componentesbasicos.paineis.PainelPadrao();
        jspVendasItens = new javax.swing.JScrollPane();
        tpVendasItens = new br.com.martinello.componentesbasicos.TabelaPadrao();
        painelPadrao2 = new br.com.martinello.componentesbasicos.paineis.PainelPadrao();
        tp = new javax.swing.JScrollPane();
        tpParcelas = new br.com.martinello.componentesbasicos.TabelaPadrao();
        ppCR = new br.com.martinello.componentesbasicos.paineis.PainelPadrao();
        jScrollPane1 = new javax.swing.JScrollPane();
        tpCrVendas = new br.com.martinello.componentesbasicos.TabelaPadrao();
        jScrollPane2 = new javax.swing.JScrollPane();
        tpCr_Mov = new br.com.martinello.componentesbasicos.TabelaPadrao();

        setLayout(new java.awt.BorderLayout());

        ppVendas.setPreferredSize(new java.awt.Dimension(1364, 300));
        ppVendas.setLayout(new java.awt.BorderLayout());

        tpVendas.setModel(otmVendas);
        jspVendas.setViewportView(tpVendas);

        ppVendas.add(jspVendas, java.awt.BorderLayout.CENTER);

        add(ppVendas, java.awt.BorderLayout.NORTH);

        ppVendasItens.setPreferredSize(new java.awt.Dimension(1345, 250));
        ppVendasItens.setLayout(new java.awt.BorderLayout());

        tpVendasItens.setModel(otmVendasItens        );
        jspVendasItens.setViewportView(tpVendasItens);

        ppVendasItens.add(jspVendasItens, java.awt.BorderLayout.CENTER);

        paItensParcelas.addTab("Itens", ppVendasItens);

        painelPadrao2.setLayout(new java.awt.BorderLayout());

        tpParcelas.setModel(otmParcela);
        tp.setViewportView(tpParcelas);

        painelPadrao2.add(tp, java.awt.BorderLayout.CENTER);

        paItensParcelas.addTab("Parcelas", painelPadrao2);

        ppCR.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(2, 300));

        tpCrVendas.setModel(otmContasReceberVendas);
        jScrollPane1.setViewportView(tpCrVendas);

        ppCR.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(302, 120));

        tpCr_Mov.setModel(otmCrMov);
        jScrollPane2.setViewportView(tpCr_Mov);

        ppCR.add(jScrollPane2, java.awt.BorderLayout.SOUTH);

        paItensParcelas.addTab("Contas Receber", ppCR);

        add(paItensParcelas, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jspVendas;
    private javax.swing.JScrollPane jspVendasItens;
    private br.com.martinello.componentesbasicos.paineis.PainelAba paItensParcelas;
    private br.com.martinello.componentesbasicos.paineis.PainelPadrao painelPadrao2;
    private br.com.martinello.componentesbasicos.paineis.PainelPadrao ppCR;
    private br.com.martinello.componentesbasicos.paineis.PainelPadrao ppVendas;
    private br.com.martinello.componentesbasicos.paineis.PainelPadrao ppVendasItens;
    private javax.swing.JScrollPane tp;
    private br.com.martinello.componentesbasicos.TabelaPadrao tpCrVendas;
    private br.com.martinello.componentesbasicos.TabelaPadrao tpCr_Mov;
    private br.com.martinello.componentesbasicos.TabelaPadrao tpParcelas;
    private br.com.martinello.componentesbasicos.TabelaPadrao tpVendas;
    private br.com.martinello.componentesbasicos.TabelaPadrao tpVendasItens;
    // End of variables declaration//GEN-END:variables
    public boolean buscarVendas(String sCodFil, int codCli) throws ErroSistemaException {
        contasReceberControl = new ContasReceberControl();
        resultado = false;
        lVendas = new LinkedList<>();
        lContasReceber = new LinkedList<>();
        lVendas = contasReceberControl.buscarVendas(sCodFil, codCli);
        for (VendasModel venda : lVendas) {
            if (venda.getDevolvida().equals("N") && venda.getTipoVenda().equals("P")) {
                valorOriginal += Double.valueOf(venda.getVlrAprazo());
            } else if (venda.getDevolvida().equals("N") && venda.getTipoVenda().equals("V")) {
                valorOriginal += Double.valueOf(venda.getVlrAvista());
            }
        }

        otmVendas.setData(lVendas);
        otmVendas.fireTableDataChanged();
        resultado = true;
        if (tpVendas.getRowCount() > 0) {
            tpVendas.packAll();
            tpVendas.addRowSelectionInterval(tpVendas.convertRowIndexToView(0), tpVendas.convertRowIndexToView(0));
            tpVendas.grabFocus();

        }
        return resultado;
    }

    private void setVendaItens() {
        lVendasItens = new LinkedList<>();
        lVendasItens = otmVendas.getValue(tpVendas.getLinhaSelecionada()).getlVendasItens();
        otmVendasItens.setData(lVendasItens);
        otmVendasItens.fireTableDataChanged();
        tpVendasItens.setForeground(Color.BLACK);
        if (tpVendasItens.getRowCount() > 0) {
            tpVendasItens.packAll();
            tpVendasItens.addRowSelectionInterval(tpVendasItens.convertRowIndexToView(0), tpVendasItens.convertRowIndexToView(0));
        }

    }

    private void setParcelas() {
        lParcelas = new LinkedList<>();
        lParcelas = otmVendas.getValue(tpVendas.getLinhaSelecionada()).getlParcela();
        otmParcela.setData(lParcelas);
        otmParcela.fireTableDataChanged();
        tpParcelas.setForeground(Color.BLACK);
        if (tpParcelas.getRowCount() > 0) {
            tpParcelas.packAll();
            tpParcelas.addRowSelectionInterval(tpParcelas.convertRowIndexToView(0), tpParcelas.convertRowIndexToView(0));
        }
    }

    private void setContasReceber() {
        lContasReceber = new LinkedList<>();
        lContasReceber = otmVendas.getValue(tpVendas.getLinhaSelecionada()).getlContasReceber();
        otmContasReceberVendas.setData(lContasReceber);
        otmContasReceberVendas.fireTableDataChanged();
        tpCrVendas.setForeground(Color.BLACK);      
        if (tpCrVendas.getRowCount() > 0) {
            tpCrVendas.packAll();
            tpCrVendas.addRowSelectionInterval(tpCrVendas.convertRowIndexToView(0), tpCrVendas.convertRowIndexToView(0));
        }        
    }

    private void setContasReceber_Mov() {
        lContasReceber_Mov = new LinkedList<>();
        lContasReceber_Mov = otmContasReceberVendas.getValue(tpCrVendas.getLinhaSelecionada()).getlContasReceber_mov();
        otmCrMov.setData(lContasReceber_Mov);
        otmCrMov.fireTableDataChanged();
        tpCr_Mov.setForeground(Color.BLACK);
        if (tpCr_Mov.getRowCount() > 0) {
            tpCr_Mov.packAll();
            tpCr_Mov.addRowSelectionInterval(tpCr_Mov.convertRowIndexToView(0), tpCr_Mov.convertRowIndexToView(0));
        }
    }

}
