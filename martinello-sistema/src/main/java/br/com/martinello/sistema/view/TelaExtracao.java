/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.martinello.sistema.view;

import br.com.martinello.bd.matriz.control.ExportarExcelControl;
import br.com.martinello.bd.matriz.control.FilialController;
import br.com.martinello.bd.matriz.control.LogExtracaoController;
import br.com.martinello.bd.matriz.control.ParcelasExtracaoController;
import br.com.martinello.bd.matriz.control.ProcessamentoController;
import br.com.martinello.bd.matriz.model.domain.ExtracaoModel;
import br.com.martinello.bd.matriz.model.domain.FilialModel;
import br.com.martinello.bd.matriz.model.domain.LogExtracaoModel;
import br.com.martinello.bd.matriz.model.domain.ProcessamentoModel;
import br.com.martinello.componentesbasicos.paineis.JPStatus;
import br.com.martinello.componentesbasicos.paineis.TelaProcessamento;
import br.com.martinello.componentesbasicos.view.TelaPadrao;
import br.com.martinello.util.Utilitarios;
import br.com.martinello.util.excessoes.ErroSistemaException;
import com.towel.swing.table.ObjectTableModel;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author luiz.almeida
 */
public class TelaExtracao extends TelaPadrao {

    public ParcelasExtracaoController parcelaExtracaoController;
    public ExtracaoModel extracaoModel;
    public LogExtracaoModel filtroLogExtracao;
    public List<LogExtracaoModel> lLogExtracaoModel = new ArrayList();
    public List<FilialModel> lFilialProcessada;
    public FilialController filialController;
    public LogExtracaoController logExtracaoController;
    public FilialModel filtroFilialModel = new FilialModel();
    public List<FilialModel> lfilial = new ArrayList();
    public List<FilialModel> lfilialExt = new ArrayList();
    public List<ExtracaoModel> lExtracaoModel = new ArrayList<>();
    public static List<FilialModel> lfiliaisModel = new ArrayList();
    public String retornoExtracao;
    public boolean execucao;
    private String valorCopiado;
    public static String usuario;
    public static String horaInicio, horaFinal;
    public static int quantRegistro;
    private ExecutorService executorExtracao = Executors.newFixedThreadPool(1);
    private ProcessamentoController processamento = new ProcessamentoController();
    private ProcessamentoModel processamentoModel = new ProcessamentoModel();

    private final ObjectTableModel<FilialModel> otmFilialIntegracao = new ObjectTableModel<>(
            FilialModel.class, "filial,nome,cnpjLoja,statusIntegracao,statusExtracao,datainicioOperacao,dataOperacaoDbNovo,status");

    private final ObjectTableModel<LogExtracaoModel> otmLogExtracao = new ObjectTableModel<>(
            LogExtracaoModel.class, "indice,idExtracao,idExtrator,filial,cliente,cgcCpf,contrato,vencimento,status,menssagem,dataExtracao");
    final TelaProcessamento telaProcessamentoExtracao = new TelaProcessamento("Realizando extração...");

//     public FilialController filiaisControler = new FilialController();
    /**
     * Creates new form TelaExtracao
     */
    public TelaExtracao() {
        usuario = TelaPrincipal.usuario.getLogin();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        initComponents();
        carregarFiliais();

        filialController = new FilialController();
        try {
            filialController.insertFiliaisExtracao();
        } catch (ErroSistemaException ex) {
            ex.printStackTrace();
            jpsExtracao.setStatus(ex.getLocalizedMessage(), JPStatus.ERRO, ex);
        }

        cdFiltroDataExtracao.setDate(new Date());
        cdFiltroDataFinal.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paExtracao = new br.com.martinello.componentesbasicos.paineis.PainelAba();
        ppExtracao = new br.com.martinello.componentesbasicos.paineis.PainelPadrao();
        jspFilialIntegracao = new javax.swing.JScrollPane();
        tpFiliaisIntegracao = new br.com.martinello.componentesbasicos.TabelaPadrao();
        ppFiltroExtracao = new br.com.martinello.componentesbasicos.paineis.PainelPadrao();
        rFilial = new br.com.martinello.componentesbasicos.Rotulo();
        bExtrair = new br.com.martinello.componentesbasicos.Botao();
        rStatusIntegracao = new br.com.martinello.componentesbasicos.Rotulo();
        clsStatusIntegracao = new br.com.martinello.componentesbasicos.CampoListaSimples();
        bPesquisar = new br.com.martinello.componentesbasicos.Botao();
        clsStatusExtracao = new br.com.martinello.componentesbasicos.CampoListaSimples();
        rStatusExtracao = new br.com.martinello.componentesbasicos.Rotulo();
        clsFilial = new br.com.martinello.componentesbasicos.CampoListaSimples();
        bAjudaExtracao = new br.com.martinello.componentesbasicos.Botao();
        ppLogExtracao = new br.com.martinello.componentesbasicos.paineis.PainelPadrao();
        ppFiltroLogEtracao = new br.com.martinello.componentesbasicos.paineis.PainelPadrao();
        rFiltroCliente = new br.com.martinello.componentesbasicos.Rotulo();
        rFiltroContratro = new br.com.martinello.componentesbasicos.Rotulo();
        rFiltroFilial = new br.com.martinello.componentesbasicos.Rotulo();
        rFiltroIdExtrator = new br.com.martinello.componentesbasicos.Rotulo();
        rFiltroStatus = new br.com.martinello.componentesbasicos.Rotulo();
        csFiltroCliente = new br.com.martinello.componentesbasicos.CampoString();
        csFiltroContrato = new br.com.martinello.componentesbasicos.CampoString();
        clsFiltroFilial = new br.com.martinello.componentesbasicos.CampoListaSimples();
        csFiltroIdExtrator = new br.com.martinello.componentesbasicos.CampoString();
        clsFiltroStatus = new br.com.martinello.componentesbasicos.CampoListaSimples();
        bFiltroPesquisar = new br.com.martinello.componentesbasicos.Botao();
        bFiltroCancelar = new br.com.martinello.componentesbasicos.Botao();
        rFiltroDataExtracao = new br.com.martinello.componentesbasicos.Rotulo();
        cdFiltroDataExtracao = new br.com.martinello.componentesbasicos.CampoData();
        rotulo1 = new br.com.martinello.componentesbasicos.Rotulo();
        cdFiltroDataFinal = new br.com.martinello.componentesbasicos.CampoData();
        bGerarExcelFiltroLog = new br.com.martinello.componentesbasicos.Botao();
        jspLogExtracao = new javax.swing.JScrollPane();
        tpLogExtracao = new br.com.martinello.componentesbasicos.TabelaPadrao();
        jpsExtracao = new br.com.martinello.componentesbasicos.paineis.JPStatus();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Extração");
        setPreferredSize(new java.awt.Dimension(1366, 768));

        ppExtracao.setLayout(new java.awt.BorderLayout());

        tpFiliaisIntegracao.setModel(otmFilialIntegracao);
        tpFiliaisIntegracao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tpFiliaisIntegracaoFocusLost(evt);
            }
        });
        tpFiliaisIntegracao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tpFiliaisIntegracaoKeyPressed(evt);
            }
        });
        jspFilialIntegracao.setViewportView(tpFiliaisIntegracao);

        ppExtracao.add(jspFilialIntegracao, java.awt.BorderLayout.CENTER);

        ppFiltroExtracao.setPreferredSize(new java.awt.Dimension(669, 100));

        rFilial.setText("Filial:");

        bExtrair.setText("Extrair");
        bExtrair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExtrairActionPerformed(evt);
            }
        });

        rStatusIntegracao.setText("Status Integração:");

        clsStatusIntegracao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "PROCESSADO", "NAO PROCESSADO" }));

        bPesquisar.setText("Pesquisar");
        bPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPesquisarActionPerformed(evt);
            }
        });

        clsStatusExtracao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "EXTRAIDO", "NAO EXTRAIDO" }));

        rStatusExtracao.setText("Status Extração:");

        bAjudaExtracao.setText("Ajuda");
        bAjudaExtracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAjudaExtracaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ppFiltroExtracaoLayout = new javax.swing.GroupLayout(ppFiltroExtracao);
        ppFiltroExtracao.setLayout(ppFiltroExtracaoLayout);
        ppFiltroExtracaoLayout.setHorizontalGroup(
            ppFiltroExtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ppFiltroExtracaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ppFiltroExtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(rStatusIntegracao, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(rFilial, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(rStatusExtracao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ppFiltroExtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ppFiltroExtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(clsStatusExtracao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clsStatusIntegracao, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                    .addComponent(clsFilial, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 779, Short.MAX_VALUE)
                .addGroup(ppFiltroExtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(bExtrair, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bAjudaExtracao, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ppFiltroExtracaoLayout.setVerticalGroup(
            ppFiltroExtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ppFiltroExtracaoLayout.createSequentialGroup()
                .addGroup(ppFiltroExtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ppFiltroExtracaoLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(rStatusIntegracao, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ppFiltroExtracaoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ppFiltroExtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ppFiltroExtracaoLayout.createSequentialGroup()
                                .addComponent(bExtrair, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bAjudaExtracao, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ppFiltroExtracaoLayout.createSequentialGroup()
                                .addGroup(ppFiltroExtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rFilial, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(clsFilial, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clsStatusIntegracao, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ppFiltroExtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rStatusExtracao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(clsStatusExtracao, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        ppExtracao.add(ppFiltroExtracao, java.awt.BorderLayout.PAGE_START);

        paExtracao.addTab("Extração", ppExtracao);

        ppLogExtracao.setLayout(new java.awt.BorderLayout());

        ppFiltroLogEtracao.setPreferredSize(new java.awt.Dimension(1220, 172));
        ppFiltroLogEtracao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ppFiltroLogEtracaoMouseClicked(evt);
            }
        });

        rFiltroCliente.setText("Código Cliente:");

        rFiltroContratro.setText("Contrato:");

        rFiltroFilial.setText("Filial:");

        rFiltroIdExtrator.setText("Id Extrator:");

        rFiltroStatus.setText("Status:");

        clsFiltroStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Erro", "Sucesso", "Aguardando", " " }));

        bFiltroPesquisar.setText("Pesquisar");
        bFiltroPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFiltroPesquisarActionPerformed(evt);
            }
        });

        bFiltroCancelar.setText("Cancelar");

        rFiltroDataExtracao.setText("Data Extração:");

        rotulo1.setText(" - ");

        bGerarExcelFiltroLog.setText("Gerar Excel");
        bGerarExcelFiltroLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGerarExcelFiltroLogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ppFiltroLogEtracaoLayout = new javax.swing.GroupLayout(ppFiltroLogEtracao);
        ppFiltroLogEtracao.setLayout(ppFiltroLogEtracaoLayout);
        ppFiltroLogEtracaoLayout.setHorizontalGroup(
            ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ppFiltroLogEtracaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rFiltroFilial, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rFiltroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rFiltroContratro, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rFiltroIdExtrator, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rFiltroStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rFiltroDataExtracao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clsFiltroFilial, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csFiltroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csFiltroContrato, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csFiltroIdExtrator, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ppFiltroLogEtracaoLayout.createSequentialGroup()
                        .addGroup(ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(clsFiltroStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cdFiltroDataExtracao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rotulo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cdFiltroDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 823, Short.MAX_VALUE)
                .addGroup(ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(bFiltroPesquisar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bFiltroCancelar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bGerarExcelFiltroLog, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        ppFiltroLogEtracaoLayout.setVerticalGroup(
            ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ppFiltroLogEtracaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rFiltroFilial, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clsFiltroFilial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rFiltroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csFiltroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rFiltroContratro, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csFiltroContrato, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ppFiltroLogEtracaoLayout.createSequentialGroup()
                        .addComponent(rFiltroIdExtrator, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rFiltroStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bFiltroPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rFiltroDataExtracao, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ppFiltroLogEtracaoLayout.createSequentialGroup()
                        .addGroup(ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(csFiltroIdExtrator, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bFiltroCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clsFiltroStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bGerarExcelFiltroLog, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ppFiltroLogEtracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cdFiltroDataExtracao, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cdFiltroDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rotulo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ppLogExtracao.add(ppFiltroLogEtracao, java.awt.BorderLayout.PAGE_START);

        tpLogExtracao.setModel(otmLogExtracao);
        tpLogExtracao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tpLogExtracaoFocusLost(evt);
            }
        });
        tpLogExtracao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tpLogExtracaoKeyPressed(evt);
            }
        });
        jspLogExtracao.setViewportView(tpLogExtracao);

        ppLogExtracao.add(jspLogExtracao, java.awt.BorderLayout.CENTER);

        paExtracao.addTab("Log Extração", ppLogExtracao);

        getContentPane().add(paExtracao, java.awt.BorderLayout.CENTER);
        getContentPane().add(jpsExtracao, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bExtrairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExtrairActionPerformed

        int result;

        if (clsFilial.getSelectedItem().toString().equals("TODAS")) {
            Object[] options = {"Confirmar", "Cancelar"};
            result = JOptionPane.showOptionDialog(null, "Será Extraído Registrosde Todas as Filiais. \n Clique Confirmar para Continuar!", "Informação", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            if (result == 0) {
                System.out.println("Começando.....");
                jpsExtracao.setStatus("Realizando extração...", JPStatus.ALERTA);
                extracaoGeralSgl();

            }

        } else {
            Object[] options = {"Confirmar", "Cancelar"};
            result = JOptionPane.showOptionDialog(null, "Será Extraído Registros da Filial \n " + clsFilial.getSelectedItem().toString() + " \n Clique Confirmar para Continuar", "Informação", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            if (result == 0) {
                System.out.println("Começando.....");
                jpsExtracao.setStatus("Realizando extração...", JPStatus.ALERTA);
                extracaoUnica();

            }
        }

    }//GEN-LAST:event_bExtrairActionPerformed

    private void bPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPesquisarActionPerformed
        new Thread() {
            @Override
            public void run() {
                filialController = new FilialController();
                try {
                    filialController.buscarFilialProcessada(usuario);
                } catch (ErroSistemaException ex) {
                    jpsExtracao.setStatus(ex.getLocalizedMessage(), JPStatus.ERRO, ex);
                }
                carregarFilialIntegrada();
            }
        }.start();
    }//GEN-LAST:event_bPesquisarActionPerformed

    private void bFiltroPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFiltroPesquisarActionPerformed
        final TelaProcessamento telaProcessamentoteste = new TelaProcessamento("Realizando consulta...");
        new Thread() {
            @Override
            public void run() {
                try {

                    logExtracaoController = new LogExtracaoController();
                    lLogExtracaoModel = new ArrayList<>();
                    filtroLogExtracao = new LogExtracaoModel();
                    if (clsFiltroFilial.getSelectedItem().toString().equals("TODAS")) {
                    } else {
                        FilialModel filialModel = new FilialModel();
                        String filial = clsFiltroFilial.getSelectedItem().toString();
                        try {
                            filialModel = filialController.listarFilialExtracao(filial);
                        } catch (ErroSistemaException ex) {
                            jpsExtracao.setStatus(ex.getLocalizedMessage(), JPStatus.ERRO, ex);
                        }
                        filtroLogExtracao.setFilial(filialModel.getPontoFilial());
                    }
                    if (csFiltroCliente.getText().length() > 0) {
                        filtroLogExtracao.setCliente(csFiltroCliente.getText());
                    }
                    if (csFiltroContrato.getText().length() > 0) {
                        filtroLogExtracao.setContrato(csFiltroContrato.getText());

                    }
                    if (csFiltroIdExtrator.getText().length() > 0) {
                        filtroLogExtracao.setContrato(csFiltroIdExtrator.getText());

                    }
                    if (cdFiltroDataExtracao.getDate() != null) {
                        if (cdFiltroDataFinal.getDate() != null) {
                            filtroLogExtracao.setDataExtracao(Utilitarios.converteDataString(cdFiltroDataExtracao.getDate(), "dd/MM/yyyy"));
                            filtroLogExtracao.setDataExtracaoFim(Utilitarios.converteDataString(cdFiltroDataFinal.getDate(), "dd/MM/yyyy"));
                        } else {
                            jpsExtracao.setStatus("O campo data precisa ser preenchido nos dois campos, por favor preencha o campo ao lado direito!", JPStatus.ALERTA, 20);
                        }
                    }
                    if (cdFiltroDataFinal.getDate() != null) {
                        if (cdFiltroDataExtracao.getDate() != null) {
                            filtroLogExtracao.setDataExtracao(Utilitarios.converteDataString(cdFiltroDataExtracao.getDate(), "dd/MM/yyyy"));
                            filtroLogExtracao.setDataExtracaoFim(Utilitarios.converteDataString(cdFiltroDataFinal.getDate(), "dd/MM/yyyy"));
                        } else {
                            jpsExtracao.setStatus("O campo data precisa ser preenchido nos dois campos, por favor preencha o campo ao lado esquerdo!", JPStatus.ALERTA, 20);
                        }
                    }
                    if (clsFiltroStatus.getSelectedItem().toString().equals("")) {

                    } else {
                        if (clsFiltroStatus.getSelectedItem().toString().equalsIgnoreCase("erro")) {
                            filtroLogExtracao.setStatus("E");
                        } else if (clsFiltroStatus.getSelectedItem().toString().equalsIgnoreCase("sucesso")) {
                            filtroLogExtracao.setStatus("S");
                      
                        } else if (clsFiltroStatus.getSelectedItem().toString().equalsIgnoreCase("Aguardando")) {
                            filtroLogExtracao.setStatus("A");
                        }
                    }
                    lLogExtracaoModel = logExtracaoController.BuscarLogExtracao(filtroLogExtracao);

                    otmLogExtracao.setData(lLogExtracaoModel);
                    otmLogExtracao.fireTableDataChanged();

                    jpsExtracao.setStatus("Pesquisa realizada com sucesso.", JPStatus.NORMAL);

                    if (tpLogExtracao.getRowCount() > 0) {
                        // tpLogExtracao.packAll();
                        // tpLogExtracao.addRowSelectionInterval(tpLogExtracao.convertRowIndexToView(0), tpLogExtracao.convertRowIndexToView(0));
                        // tpLogExtracao.grabFocus();
                    }

                } catch (NullPointerException ex) {
                    jpsExtracao.setStatus("Erro ao pesquisar Log_Extração.", JPStatus.ERRO, ex);
                    System.out.println(ex);
                    SwingUtilities.invokeLater(() -> {
                        telaProcessamentoteste.dispose();
                    });
                } catch (ErroSistemaException ex) {
                    ex.printStackTrace();
                    jpsExtracao.setStatus(ex.getLocalizedMessage(), JPStatus.ERRO, ex);
                }

                SwingUtilities.invokeLater(() -> {
                    if (tpLogExtracao.getRowCount() > 0) {
                        tpLogExtracao.packAll();
                        tpLogExtracao.addRowSelectionInterval(tpLogExtracao.convertRowIndexToView(0), tpLogExtracao.convertRowIndexToView(0));
                        tpLogExtracao.grabFocus();
                    }
                    telaProcessamentoteste.dispose();
                });
            }
        }.start();

        telaProcessamentoteste.setVisible(true);
        telaProcessamentoteste.requestFocusInWindow();
    }//GEN-LAST:event_bFiltroPesquisarActionPerformed

    private void ppFiltroLogEtracaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ppFiltroLogEtracaoMouseClicked

    }//GEN-LAST:event_ppFiltroLogEtracaoMouseClicked

    private void tpLogExtracaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tpLogExtracaoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_C) {
            ////if (evt.isControlDown()) {

            valorCopiado = otmLogExtracao.getValueAt(tpLogExtracao.getSelectedRow(), tpLogExtracao.getSelectedColumn()).toString();
        }
    }//GEN-LAST:event_tpLogExtracaoKeyPressed

    private void tpLogExtracaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tpLogExtracaoFocusLost
        copiarColar();
    }//GEN-LAST:event_tpLogExtracaoFocusLost

    private void tpFiliaisIntegracaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tpFiliaisIntegracaoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_C) {
            ////if (evt.isControlDown()) {

            valorCopiado = otmFilialIntegracao.getValueAt(tpFiliaisIntegracao.getSelectedRow(), tpFiliaisIntegracao.getSelectedColumn()).toString();
        }
    }//GEN-LAST:event_tpFiliaisIntegracaoKeyPressed

    private void tpFiliaisIntegracaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tpFiliaisIntegracaoFocusLost
        copiarColar();
    }//GEN-LAST:event_tpFiliaisIntegracaoFocusLost

    private void bAjudaExtracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAjudaExtracaoActionPerformed

        try {
            java.awt.Desktop.getDesktop().browse(new java.net.URI("https://eletromoveismartinello.net.br/glpi/front/knowbaseitem.form.php?id=2"));
        } catch (URISyntaxException ex) {
            ex.printStackTrace();
            jpsExtracao.setStatus(ex.getLocalizedMessage(), JPStatus.ERRO, ex);
        } catch (IOException ex) {
            ex.printStackTrace();
            jpsExtracao.setStatus(ex.getLocalizedMessage(), JPStatus.ERRO, ex);
        }

    }//GEN-LAST:event_bAjudaExtracaoActionPerformed

    private void bGerarExcelFiltroLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGerarExcelFiltroLogActionPerformed
        final TelaProcessamento telaProcessamento = new TelaProcessamento("Exportando Excel...");
        new Thread() {
            @Override
            public void run() {
                try {
                    ExportarExcelControl exportarExcel = new ExportarExcelControl();
                    exportarExcel.exportarLogExtracao(otmLogExtracao.getData(), TelaPrincipal.diretorio);
                    jpsExtracao.setStatus("Arquivo gerado com sucesso.", jpsExtracao.NORMAL);
                } catch (ErroSistemaException ex) {
                    ex.printStackTrace();
                    jpsExtracao.setStatus(ex.getLocalizedMessage(), JPStatus.ERRO, ex);
                }
                SwingUtilities.invokeLater(() -> {
                    telaProcessamento.dispose();
                });
            }
        }.start();

        telaProcessamento.setVisible(true);
        telaProcessamento.requestFocusInWindow();
    }//GEN-LAST:event_bGerarExcelFiltroLogActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private br.com.martinello.componentesbasicos.Botao bAjudaExtracao;
    private br.com.martinello.componentesbasicos.Botao bExtrair;
    private br.com.martinello.componentesbasicos.Botao bFiltroCancelar;
    private br.com.martinello.componentesbasicos.Botao bFiltroPesquisar;
    private br.com.martinello.componentesbasicos.Botao bGerarExcelFiltroLog;
    private br.com.martinello.componentesbasicos.Botao bPesquisar;
    private br.com.martinello.componentesbasicos.CampoData cdFiltroDataExtracao;
    private br.com.martinello.componentesbasicos.CampoData cdFiltroDataFinal;
    private br.com.martinello.componentesbasicos.CampoListaSimples clsFilial;
    private br.com.martinello.componentesbasicos.CampoListaSimples clsFiltroFilial;
    private br.com.martinello.componentesbasicos.CampoListaSimples clsFiltroStatus;
    private br.com.martinello.componentesbasicos.CampoListaSimples clsStatusExtracao;
    private br.com.martinello.componentesbasicos.CampoListaSimples clsStatusIntegracao;
    private br.com.martinello.componentesbasicos.CampoString csFiltroCliente;
    private br.com.martinello.componentesbasicos.CampoString csFiltroContrato;
    private br.com.martinello.componentesbasicos.CampoString csFiltroIdExtrator;
    private br.com.martinello.componentesbasicos.paineis.JPStatus jpsExtracao;
    private javax.swing.JScrollPane jspFilialIntegracao;
    private javax.swing.JScrollPane jspLogExtracao;
    private br.com.martinello.componentesbasicos.paineis.PainelAba paExtracao;
    private br.com.martinello.componentesbasicos.paineis.PainelPadrao ppExtracao;
    private br.com.martinello.componentesbasicos.paineis.PainelPadrao ppFiltroExtracao;
    private br.com.martinello.componentesbasicos.paineis.PainelPadrao ppFiltroLogEtracao;
    private br.com.martinello.componentesbasicos.paineis.PainelPadrao ppLogExtracao;
    private br.com.martinello.componentesbasicos.Rotulo rFilial;
    private br.com.martinello.componentesbasicos.Rotulo rFiltroCliente;
    private br.com.martinello.componentesbasicos.Rotulo rFiltroContratro;
    private br.com.martinello.componentesbasicos.Rotulo rFiltroDataExtracao;
    private br.com.martinello.componentesbasicos.Rotulo rFiltroFilial;
    private br.com.martinello.componentesbasicos.Rotulo rFiltroIdExtrator;
    private br.com.martinello.componentesbasicos.Rotulo rFiltroStatus;
    private br.com.martinello.componentesbasicos.Rotulo rStatusExtracao;
    private br.com.martinello.componentesbasicos.Rotulo rStatusIntegracao;
    private br.com.martinello.componentesbasicos.Rotulo rotulo1;
    private br.com.martinello.componentesbasicos.TabelaPadrao tpFiliaisIntegracao;
    private br.com.martinello.componentesbasicos.TabelaPadrao tpLogExtracao;
    // End of variables declaration//GEN-END:variables
private void carregarFiliais() {
        //  DefaultListCheckModel lcFiliaisModel = new DefaultListCheckModel();
        for (FilialModel filial : TelaDadosGerais.lfiliaisModel) {
            // lcFiliaisModel.addElement(filial);
            // ccbFilial.setModel(lcFiliaisModel);
            clsFiltroFilial.addItem(filial);
            clsFilial.addItem(filial);
        }

    }

    private void carregarFilialIntegrada() {
        filialController = new FilialController();
        lFilialProcessada = new ArrayList<>();
        filtroFilialModel = new FilialModel();
        if (clsStatusExtracao.getSelectedItem().toString().trim() != null) {
            if (clsStatusExtracao.getSelectedItem().toString().toUpperCase().equals("EXTRAIDO")) {
                filtroFilialModel.setStatusExtracao("S");
            } else {
                filtroFilialModel.setStatusExtracao("N");
            }

        }
        if (clsStatusIntegracao.getSelectedItem().toString().trim() != null) {
            if (clsStatusIntegracao.getSelectedItem().toString().toUpperCase().equals("INTEGRADO")) {
                filtroFilialModel.setStatusIntegracao("S");
            } else {
                filtroFilialModel.setStatusIntegracao("N");
            }

        }
        try {
            lFilialProcessada = filialController.listarFilialProcessada(filtroFilialModel);
        } catch (ErroSistemaException ex) {
            jpsExtracao.setStatus(ex.getLocalizedMessage(), JPStatus.ERRO, ex);
        }
        otmFilialIntegracao.setData(lFilialProcessada);
        otmFilialIntegracao.fireTableDataChanged();

        jpsExtracao.setStatus("Pesquisa realizada com sucesso.", JPStatus.NORMAL);

        if (tpFiliaisIntegracao.getRowCount() > 0) {
            tpFiliaisIntegracao.packAll();
            tpFiliaisIntegracao.addRowSelectionInterval(tpFiliaisIntegracao.convertRowIndexToView(0), tpFiliaisIntegracao.convertRowIndexToView(0));
            tpFiliaisIntegracao.grabFocus();
        }

    }

    public void extracaoUnica() {
        final TelaProcessamento telaProcessamentoExtracao = new TelaProcessamento("Realizando Extração...");
        new Thread() {
            @Override
            public void run() {
                try {
                    boolean consultarProcessos;
                    processamento = new ProcessamentoController();
                    consultarProcessos = processamento.consultaExtracao();
                    if (consultarProcessos == false) {
                        processamentoModel = new ProcessamentoModel();
                        processamentoModel.setProvedor("EXTRATOR");
                        processamentoModel.setTipo("EXTRACAO");
                        processamentoModel.setItensEnviados(0);
                        processamentoModel.setItensSucesso(0);
                        processamentoModel.setItensErro(0);
                        processamentoModel.setItensTotal(0);
                        processamentoModel.setDataFimEnvio(Utilitarios.getDataZero());
                        processamentoModel.setItensTotal(0);
                        processamentoModel.setDataInicio(Utilitarios.dataHoraAtual());
                        processamentoModel.setUser(TelaPrincipal.usuario.getLogin());
                        processamento = new ProcessamentoController();
                        processamento.insertProcessoDB(processamentoModel);

                        extracaoModel = new ExtracaoModel();
                        extracaoModel.setOrigemRegistro("A");
                        retornoExtracao = "";
                        parcelaExtracaoController = new ParcelasExtracaoController();
                        FilialModel filialModel = new FilialModel();
                        // String filial = clsFilial.getSelectedItem().toString();
                        lfiliaisModel = TelaDadosGerais.lfiliaisModel;
                        for (FilialModel filial : lfiliaisModel) {
                            String nome = clsFilial.getSelectedItem().toString();
                            if (filial.getNomeLoja().equalsIgnoreCase(nome)) {
                                extracaoModel.setPontoFilial(filial.getFilialSgl());
                                extracaoModel.setPontoFilial(filial.getFilialSgl());
                                extracaoModel.setBdOrigem(filial.getOrigemBD());
                            }
                        }
                        lExtracaoModel = new LinkedList<>();
                        lExtracaoModel.add(extracaoModel);
                        parcelaExtracaoController.realizarExtracao(lExtracaoModel, retornoExtracao);
                        jpsExtracao.setStatus("Extração realizada com sucesso!", JPStatus.ALERTA);
                        processamento = new ProcessamentoController();
                        processamento.updateProcessoDB(processamentoModel);
                    } else {
                        jpsExtracao.setStatus("Extração não permitida. Existe processo em aberto, verifique!", JPStatus.ALERTA);
                    }
                } catch (ErroSistemaException ex) {
                    jpsExtracao.setStatus(ex.getMessage(), JPStatus.ERRO, ex);

                    execucao = false;
                }
                SwingUtilities.invokeLater(() -> {
                    telaProcessamentoExtracao.dispose();
                });
            }
        }.start();
        telaProcessamentoExtracao.setVisible(true);
        telaProcessamentoExtracao.requestFocusInWindow();
    }

    public void extracaoGeralSgl() {
        final TelaProcessamento telaProcessamentoteste = new TelaProcessamento("Realizando Extração...");
        new Thread() {
            @Override
            public void run() {
                try {
                    boolean consultarProcessos;
                    processamento = new ProcessamentoController();
                    consultarProcessos = processamento.consultaExtracao();
                    if (consultarProcessos == false) {
                        processamentoModel = new ProcessamentoModel();
                        processamentoModel.setProvedor("EXTRATOR");
                        processamentoModel.setTipo("EXTRACAO");
                        processamentoModel.setItensEnviados(0);
                        processamentoModel.setItensSucesso(0);
                        processamentoModel.setItensErro(0);
                        processamentoModel.setItensTotal(0);
                        processamentoModel.setDataFimEnvio(Utilitarios.getDataZero());
                        processamentoModel.setItensTotal(0);
                        processamentoModel.setDataInicio(Utilitarios.dataHoraAtual());
                        processamentoModel.setUser(TelaPrincipal.usuario.getLogin());
                        processamento = new ProcessamentoController();
                        processamento.insertProcessoDB(processamentoModel);

                        retornoExtracao = "";
                        lExtracaoModel = new LinkedList<>();
                        extracaoModel = new ExtracaoModel();
                        ExtracaoModel extracaoModel2 = new ExtracaoModel();
                        extracaoModel.setPontoFilial("");
                        extracaoModel.setOrigemRegistro("A");
                        extracaoModel.setBdOrigem("SGL");
                        extracaoModel2.setPontoFilial("");
                        extracaoModel2.setOrigemRegistro("A");
                        extracaoModel2.setBdOrigem("NOVO_SGL");
                        lExtracaoModel.add(extracaoModel);
                        lExtracaoModel.add(extracaoModel2);

                        parcelaExtracaoController = new ParcelasExtracaoController();
                        parcelaExtracaoController.realizarExtracao(lExtracaoModel, retornoExtracao);
                        jpsExtracao.setStatus("Extração realizada com sucesso!", JPStatus.ALERTA);
                        processamento = new ProcessamentoController();
                        processamento.updateProcessoDB(processamentoModel);
                    } else {
                        jpsExtracao.setStatus("Extração não permitida. Existe um processo aberto, verifique!", JPStatus.ALERTA);
                    }
                } catch (ErroSistemaException ex) {
                    ex.printStackTrace();
                    jpsExtracao.setStatus(ex.getMessage(), JPStatus.ERRO, ex);
                    execucao = false;
                }
                SwingUtilities.invokeLater(() -> {
                    telaProcessamentoteste.dispose();
                });
            }
        }.start();
        telaProcessamentoteste.setVisible(true);
        telaProcessamentoteste.requestFocusInWindow();
    }

    private void carregarFilialExtrair() {
        filialController = new FilialController();
        lFilialProcessada = new ArrayList<>();
        filtroFilialModel = new FilialModel();

        filtroFilialModel.setStatusExtracao("N");

        filtroFilialModel.setStatusIntegracao("S");

        try {
            lfilialExt = new ArrayList();
            lfilialExt = filialController.listarFilialProcessada(filtroFilialModel);
            filialController.atualizarExtracao(lfilialExt);

        } catch (ErroSistemaException ex) {
            jpsExtracao.setStatus(ex.getLocalizedMessage(), JPStatus.ERRO, ex);
        }
    }

    public void copiarColar() {
        StringSelection stringSelection = new StringSelection(valorCopiado);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }
}
